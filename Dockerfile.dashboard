# Conea Dashboard Dockerfile
# マルチステージビルドを使用してアプリケーションを構築

# ビルドステージ
FROM node:18-alpine AS build

# 作業ディレクトリを設定
WORKDIR /app

# 依存関係をインストールするためのパッケージファイルをコピー
COPY package*.json ./

# 依存関係をインストール
RUN npm ci

# ソースコードをコピー
COPY . .

# アプリをビルド（このステージはビルドスクリプト内で既に行われているため、コメントアウト）
# RUN npm run build

# 本番環境ステージ
FROM nginx:alpine AS production

# Nginxの設定ファイルをコピー
COPY config/nginx/conea-dashboard.conf /etc/nginx/conf.d/default.conf

# ビルドされたアプリケーションをNginxの提供ディレクトリにコピー
COPY . /usr/share/nginx/html

# 80番ポートを公開
EXPOSE 80

# ヘルスチェック設定
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
  CMD wget -q -O - http://localhost/ || exit 1

# タイムゾーンを設定
ENV TZ=Asia/Tokyo

# Nginxを起動
CMD ["nginx", "-g", "daemon off;"]

# ステージング環境ステージ
FROM production AS staging

# ステージング環境特有の設定
RUN echo "Configuring for staging environment"

# デバッグツールとログ用のユーティリティをインストール
RUN apk add --no-cache curl tzdata vim htop

# コンテナ情報を示すファイルを作成
RUN echo "This is a staging environment container" > /usr/share/nginx/html/env-info.txt

# アクセスログを標準出力にリダイレクト（Cloud Loggingとの統合用）
RUN ln -sf /dev/stdout /var/log/nginx/access.log && \
    ln -sf /dev/stderr /var/log/nginx/error.log

# 環境変数をNginxの設定に挿入するためのエントリポイントスクリプト
COPY docker-entrypoint.sh /
RUN chmod +x /docker-entrypoint.sh

# エントリポイントをカスタムスクリプトに変更
ENTRYPOINT ["/docker-entrypoint.sh"]
CMD ["nginx", "-g", "daemon off;"]