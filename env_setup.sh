#!/bin/bash
# Shopify MCP Server 環境変数設定スクリプト
# 
# このスクリプトは1Passwordから認証情報を取得し、
# Shopify MCP Serverの実行に必要な環境変数を設定します

# カラー定義
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}=====================================${NC}"
echo -e "${GREEN}Shopify MCP Server環境変数設定ツール${NC}"
echo -e "${BLUE}=====================================${NC}\n"

# 必要なコマンドの確認
check_requirements() {
    if ! command -v op &> /dev/null; then
        echo -e "${YELLOW}警告: 1Password CLIがインストールされていません${NC}"
        echo -e "${YELLOW}手動で環境変数を設定してください${NC}"
        return 1
    fi
    return 0
}

# 1Passwordから環境変数を取得する関数
get_from_1password() {
    local item_name=$1
    local field_name=$2
    
    if check_requirements; then
        # 1Password CLIを使用して値を取得
        value=$(op item get "$item_name" --fields "$field_name" 2>/dev/null)
        echo "$value"
    else
        echo ""
    fi
}

# 環境変数を設定する関数
set_env_var() {
    local var_name=$1
    local var_value=$2
    local is_secret=$3
    
    if [ -z "$var_value" ]; then
        echo -e "${YELLOW}設定をスキップ: $var_name${NC}"
        return 1
    fi
    
    export "$var_name=$var_value"
    
    if [ "$is_secret" = "true" ]; then
        echo -e "${GREEN}✓ $var_name: ***設定済み***${NC}"
    else
        echo -e "${GREEN}✓ $var_name: $var_value${NC}"
    fi
    return 0
}

# メイン処理
main() {
    echo -e "${YELLOW}環境変数を設定します...${NC}\n"
    
    # Shopify設定の項目名（1Passwordでの登録名）
    ONEPASSWORD_ITEM="Shopify API Credentials"
    
    # 環境変数の設定
    echo -e "${BLUE}[基本設定]${NC}"
    set_env_var "SHOPIFY_API_VERSION" "${SHOPIFY_API_VERSION:-2024-01}" false
    
    echo -e "\n${BLUE}[認証情報]${NC}"
    # 1Passwordから取得または手動設定
    SHOP_NAME=$(get_from_1password "$ONEPASSWORD_ITEM" "shop_name")
    if [ -z "$SHOP_NAME" ]; then
        read -p "SHOPIFY_SHOP_NAME: " SHOP_NAME
    fi
    set_env_var "SHOPIFY_SHOP_NAME" "$SHOP_NAME" false
    
    ACCESS_TOKEN=$(get_from_1password "$ONEPASSWORD_ITEM" "access_token")
    if [ -z "$ACCESS_TOKEN" ]; then
        read -s -p "SHOPIFY_ACCESS_TOKEN: " ACCESS_TOKEN
        echo
    fi
    set_env_var "SHOPIFY_ACCESS_TOKEN" "$ACCESS_TOKEN" true
    
    API_KEY=$(get_from_1password "$ONEPASSWORD_ITEM" "api_key")
    if [ -z "$API_KEY" ]; then
        read -s -p "SHOPIFY_API_KEY: " API_KEY
        echo
    fi
    set_env_var "SHOPIFY_API_KEY" "$API_KEY" true
    
    API_SECRET=$(get_from_1password "$ONEPASSWORD_ITEM" "api_secret")
    if [ -z "$API_SECRET" ]; then
        read -s -p "SHOPIFY_API_SECRET_KEY: " API_SECRET
        echo
    fi
    set_env_var "SHOPIFY_API_SECRET_KEY" "$API_SECRET" true
    
    # .env ファイルの作成
    echo -e "\n${BLUE}[.envファイル作成]${NC}"
    if [ -f .env ]; then
        echo -e "${YELLOW}既存の.envファイルをバックアップします${NC}"
        mv .env .env.backup.$(date +%Y%m%d_%H%M%S)
    fi
    
    cat > .env << EOF
# Shopify MCP Server Configuration
# Generated by env_setup.sh at $(date)

# Shop Configuration
SHOPIFY_SHOP_NAME=$SHOP_NAME
SHOPIFY_API_VERSION=${SHOPIFY_API_VERSION:-2024-01}

# Authentication
SHOPIFY_ACCESS_TOKEN=$ACCESS_TOKEN
SHOPIFY_API_KEY=$API_KEY
SHOPIFY_API_SECRET_KEY=$API_SECRET

# Logging Configuration
LOG_LEVEL=INFO
MCP_LOG_LEVEL=INFO
EOF
    
    echo -e "${GREEN}✓ .envファイルを作成しました${NC}"
    
    # 設定の検証
    echo -e "\n${BLUE}[環境設定の検証]${NC}"
    verify_settings
    
    # テスト実行の提案
    echo -e "\n${BLUE}[次のステップ]${NC}"
    echo -e "${YELLOW}1. テストを実行してください:${NC}"
    echo "   python3 test_server.py"
    echo -e "${YELLOW}2. サーバーを起動してください:${NC}"
    echo "   python3 shopify-mcp-server.py"
}

# 設定の検証
verify_settings() {
    local all_set=true
    
    # 必須環境変数のチェック
    required_vars=("SHOPIFY_SHOP_NAME" "SHOPIFY_ACCESS_TOKEN" "SHOPIFY_API_KEY" "SHOPIFY_API_SECRET_KEY")
    
    for var in "${required_vars[@]}"; do
        if [ -z "${!var}" ]; then
            echo -e "${RED}✗ $var が設定されていません${NC}"
            all_set=false
        else
            echo -e "${GREEN}✓ $var が設定されています${NC}"
        fi
    done
    
    if [ "$all_set" = true ]; then
        echo -e "\n${GREEN}✓ すべての必須環境変数が設定されました${NC}"
        return 0
    else
        echo -e "\n${RED}✗ 一部の環境変数が未設定です${NC}"
        return 1
    fi
}

# クリーンアップ関数
cleanup() {
    echo -e "\n${YELLOW}環境変数をクリアしています...${NC}"
    unset SHOPIFY_SHOP_NAME SHOPIFY_ACCESS_TOKEN SHOPIFY_API_KEY SHOPIFY_API_SECRET_KEY
    echo -e "${GREEN}完了しました${NC}"
}

# ヘルプ表示
show_help() {
    echo "使用方法: $0 [オプション]"
    echo ""
    echo "オプション:"
    echo "  -h, --help    このヘルプを表示"
    echo "  -c, --clean   環境変数をクリア"
    echo "  -v, --verify  環境変数の設定を確認"
    echo ""
    echo "例:"
    echo "  $0           # 環境変数を設定"
    echo "  $0 --verify  # 設定を確認"
    echo "  $0 --clean   # 環境変数をクリア"
}

# コマンドライン引数の処理
case "${1:-}" in
    -h|--help)
        show_help
        exit 0
        ;;
    -c|--clean)
        cleanup
        exit 0
        ;;
    -v|--verify)
        echo -e "${BLUE}環境変数の設定を確認しています...${NC}\n"
        verify_settings
        exit $?
        ;;
    *)
        main
        ;;
esac