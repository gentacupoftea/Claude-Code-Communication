version: '3.8'

services:
  test-db:
    image: postgres:14-alpine
    environment:
      POSTGRES_DB: conea_test
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d conea_test"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - test-network

  test-redis:
    image: redis:alpine
    command: redis-server --requirepass test_redis_password
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "test_redis_password", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - test-network

  mock-shopify:
    build:
      context: ./mock-services
      dockerfile: Dockerfile.mock-shopify
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - test-network

  mock-ga:
    build:
      context: ./mock-services
      dockerfile: Dockerfile.mock-ga
    ports:
      - "8081:8081"
    environment:
      - PORT=8081
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - test-network

  test-app:
    build:
      context: ../
      dockerfile: docker-test/Dockerfile.test
    environment:
      - DATABASE_URL=postgresql://test_user:test_password@test-db:5432/conea_test
      - REDIS_URL=redis://:test_redis_password@test-redis:6379/0
      - SHOPIFY_BASE_URL=http://mock-shopify:8080
      - GA_BASE_URL=http://mock-ga:8081
      - JWT_SECRET_KEY=test_jwt_secret_key_for_testing
      - PYTHONPATH=/app
      - TEST_ENVIRONMENT=docker
      - E2E_BASE_URL=http://localhost:8000
      - PLAYWRIGHT_BROWSERS_PATH=/ms-playwright
    depends_on:
      test-db:
        condition: service_healthy
      test-redis:
        condition: service_healthy
      mock-shopify:
        condition: service_healthy
      mock-ga:
        condition: service_healthy
    volumes:
      - ../tests:/app/tests
      - ../src:/app/src
      - ./test-results:/app/test-results
      - ./playwright-report:/app/playwright-report
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - test-network
    stdin_open: true
    tty: true

volumes:
  postgres_data:

networks:
  test-network:
    driver: bridge