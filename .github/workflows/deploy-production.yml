name: Deploy to Production

on:
  push:
    branches:
      - main
  # 手動でも実行できるように設定
  workflow_dispatch:
    inputs:
      confirmation:
        description: 'Type "yes" to confirm deployment to production'
        required: true
        default: 'no'

jobs:
  check-confirmation:
    runs-on: ubuntu-latest
    # workflow_dispatch の場合のみ確認チェックを行う
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Check confirmation
        if: github.event.inputs.confirmation != 'yes'
        run: |
          echo "Deployment confirmation not provided. Please type 'yes' to confirm."
          exit 1

  build-and-test:
    runs-on: ubuntu-latest
    # push イベントの場合、または confirmation が通過した場合
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.confirmation == 'yes')
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Lint frontend
        working-directory: ./frontend
        run: npm run lint
      
      - name: Test frontend
        working-directory: ./frontend
        run: npm test
      
      - name: Build frontend
        working-directory: ./frontend
        run: npm run build
        env:
          REACT_APP_API_URL: https://conea.example.com/api
          REACT_APP_WS_URL: wss://conea.example.com/ws
          REACT_APP_VERSION: prod-${{ github.sha }}
      
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: Lint backend
        working-directory: ./backend
        run: npm run lint
      
      - name: Test backend
        working-directory: ./backend
        run: npm test
      
      - name: Build backend
        working-directory: ./backend
        run: npm run build
  
  security-scan:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Run npm audit
        run: |
          npm audit --production || echo "Warning: npm audit found issues"
      
      - name: Run OWASP Dependency-Check
        uses: dependency-check/dependency-check-action@main
        with:
          project: 'Conea'
          path: '.'
          format: 'HTML'
          out: 'reports'
          args: >
            --scan .
            --suppression ./dependency-check-suppressions.xml
            --failOnCVSS 7
      
      - name: Upload dependency check report
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: dependency-check-report
          path: reports
  
  build-docker-images:
    needs: security-scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          file: ./deployment/production/frontend.Dockerfile
          push: true
          tags: |
            conea/frontend:production-${{ github.sha }}
            conea/frontend:production
            conea/frontend:latest
          build-args: |
            REACT_APP_API_URL=https://conea.example.com/api
            REACT_APP_WS_URL=wss://conea.example.com/ws
            REACT_APP_VERSION=production-${{ github.sha }}
      
      - name: Build and push backend Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          file: ./deployment/production/backend.Dockerfile
          push: true
          tags: |
            conea/backend:production-${{ github.sha }}
            conea/backend:production
            conea/backend:latest
  
  approve-deployment:
    needs: build-docker-images
    runs-on: ubuntu-latest
    # 本番デプロイの手動承認（プッシュの場合のみ）
    if: github.event_name == 'push'
    environment: production
    steps:
      - name: Approve deployment
        run: echo "Deployment to production has been approved"
  
  deploy-to-production:
    needs: [build-docker-images, approve-deployment]
    if: |
      always() && 
      (needs.build-docker-images.result == 'success') && 
      (needs.approve-deployment.result == 'success' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to production server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_SSH_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/conea-production
            git pull
            cp .env deployment/production/.env
            cd deployment/production
            
            # 新しいバージョンのタグを設定
            export NEW_VERSION=production-${{ github.sha }}
            
            # Blue-Green デプロイメント
            # 現在のデプロイをチェック
            if docker ps | grep -q "conea_blue"; then
              export CURRENT_ENV=blue
              export NEW_ENV=green
            else
              export CURRENT_ENV=green
              export NEW_ENV=blue
            fi
            
            echo "Current environment: $CURRENT_ENV"
            echo "New environment: $NEW_ENV"
            
            # 新しい環境を準備
            docker-compose -f docker-compose.$NEW_ENV.yml pull
            docker-compose -f docker-compose.$NEW_ENV.yml down --remove-orphans
            docker-compose -f docker-compose.$NEW_ENV.yml up -d
            
            # 新しい環境のヘルスチェック
            for i in {1..30}; do
              if curl -f http://localhost:8080/health > /dev/null 2>&1; then
                echo "New environment is healthy"
                break
              fi
              
              if [ $i -eq 30 ]; then
                echo "New environment failed health check"
                exit 1
              fi
              
              echo "Waiting for new environment to be healthy..."
              sleep 2
            done
            
            # トラフィックを切り替え
            echo "Switching traffic to $NEW_ENV environment"
            cd /etc/nginx/conf.d
            ln -sf conea.$NEW_ENV.conf conea.conf
            nginx -s reload
            
            # 古い環境を終了（オプション）
            # docker-compose -f /opt/conea-production/deployment/production/docker-compose.$CURRENT_ENV.yml down
      
      - name: Run production smoke tests
        run: |
          echo "Running smoke tests against production environment..."
          sleep 30  # 起動を待つ
          curl -f https://conea.example.com/health || exit 1
          curl -f https://conea.example.com/api/health || exit 1
      
      - name: Create release tag
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/release-${{ github.sha }}',
              sha: '${{ github.sha }}'
            })
      
      - name: Notify on success
        if: success()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": ":rocket: Successfully deployed to production: ${{ github.repository }}@${{ github.sha }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Notify on failure
        if: failure()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": ":x: Failed to deploy to production: ${{ github.repository }}@${{ github.sha }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}