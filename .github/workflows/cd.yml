name: Continuous Deployment

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
          
      - name: Run tests
        run: |
          pytest tests/
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: shopify-mcp-server:${{ github.sha }}
          outputs: type=docker,dest=/tmp/shopify-mcp-server.tar
          
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/shopify-mcp-server.tar
  
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v3
      
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp
          
      - name: Load Docker image
        run: |
          docker load --input /tmp/shopify-mcp-server.tar
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'shopify-mcp-server:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
  
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    environment: staging
    steps:
      - uses: actions/checkout@v3
      
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp
          
      - name: Load Docker image
        run: |
          docker load --input /tmp/shopify-mcp-server.tar
          
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          
      - name: Configure Docker for GCR
        run: |
          gcloud auth configure-docker
          
      - name: Push Docker image to GCR
        run: |
          docker tag shopify-mcp-server:${{ github.sha }} gcr.io/${{ secrets.GCP_PROJECT_ID }}/shopify-mcp-server:staging
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/shopify-mcp-server:staging
          
      - name: Deploy to GKE
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} --zone ${{ secrets.GKE_ZONE }}
          kubectl apply -f deployment/kubernetes/namespace.yaml
          kubectl apply -f deployment/kubernetes/configmap.yaml
          
          # Set environment variables in the deployment file
          sed -i "s|IMAGE_URL|gcr.io/${{ secrets.GCP_PROJECT_ID }}/shopify-mcp-server:staging|g" deployment/kubernetes/deployment.yaml
          
          kubectl apply -f deployment/kubernetes/deployment.yaml
          kubectl apply -f deployment/kubernetes/service.yaml
          
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/shopify-mcp-server -n shopify-mcp
          python scripts/verify_deployment.py --environment=staging
          
      - name: Run integration tests against staging
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
          pip install -r requirements-integration.txt
          
          ENVIRONMENT=staging pytest tests/integration/
          
      - name: Send notification
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: Staging Deployment
          SLACK_MESSAGE: 'Deployment to staging ${{ job.status }}'
  
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    environment: production
    # Only run this job when code is pushed to main with a version tag
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v3
      
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp
          
      - name: Load Docker image
        run: |
          docker load --input /tmp/shopify-mcp-server.tar
          
      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          
      - name: Configure Docker for GCR
        run: |
          gcloud auth configure-docker
          
      - name: Push Docker image to GCR
        run: |
          docker tag shopify-mcp-server:${{ github.sha }} gcr.io/${{ secrets.GCP_PROJECT_ID }}/shopify-mcp-server:${{ steps.get_version.outputs.VERSION }}
          docker tag shopify-mcp-server:${{ github.sha }} gcr.io/${{ secrets.GCP_PROJECT_ID }}/shopify-mcp-server:latest
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/shopify-mcp-server:${{ steps.get_version.outputs.VERSION }}
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/shopify-mcp-server:latest
          
      - name: Deploy to GKE
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} --zone ${{ secrets.GKE_ZONE }}
          
          # Set environment variables in the deployment file
          sed -i "s|IMAGE_URL|gcr.io/${{ secrets.GCP_PROJECT_ID }}/shopify-mcp-server:${{ steps.get_version.outputs.VERSION }}|g" deployment/kubernetes/deployment.yaml
          
          kubectl apply -f deployment/kubernetes/deployment.yaml -n shopify-mcp
          
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/shopify-mcp-server -n shopify-mcp
          python scripts/verify_deployment.py --environment=production
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          
      - name: Send notification
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: Production Deployment
          SLACK_MESSAGE: 'Deployment to production ${{ job.status }} - version ${{ steps.get_version.outputs.VERSION }}'

  rollback:
    name: Rollback
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: failure() && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          
      - name: Rollback to previous version
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} --zone ${{ secrets.GKE_ZONE }}
          kubectl rollout undo deployment/shopify-mcp-server -n shopify-mcp
          
      - name: Verify rollback
        run: |
          kubectl rollout status deployment/shopify-mcp-server -n shopify-mcp
          
      - name: Send notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: danger
          SLACK_TITLE: Production Rollback
          SLACK_MESSAGE: 'Production deployment failed, rollback triggered'