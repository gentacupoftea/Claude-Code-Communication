name: OptimizedCacheManager Verification

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/api/shopify/optimized_cache_manager.py'
      - 'src/api/shopify/cache_manager.py'
      - 'scripts/cache-verification/**'
      - '.github/workflows/cache-verification.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/api/shopify/optimized_cache_manager.py'
      - 'src/api/shopify/cache_manager.py'
      - 'scripts/cache-verification/**'
      - '.github/workflows/cache-verification.yml'
  workflow_dispatch:
    inputs:
      full_test:
        description: 'Run full test suite (including load tests)'
        required: false
        default: 'false'
        type: boolean

jobs:
  verify:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:6-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install matplotlib numpy psutil redis prometheus-client
    
    - name: Run basic verification tests
      run: |
        cd scripts/cache-verification
        mkdir -p logs test_results
        chmod +x *.sh *.py
        
        if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.full_test }}" == "true" ]]; then
          echo "Running full test suite..."
          ./automated_verification.sh
        else
          echo "Running basic test suite..."
          # 基本テストのみ実行（負荷テストとサイズテストをスキップ）
          python run_cache_tests.py --iterations 100 --value-size 1024 --concurrency 1
          python run_cache_tests.py --iterations 1000 --value-size 1024 --concurrency 4
        fi
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          scripts/cache-verification/test_results/
          scripts/cache-verification/logs/
    
    - name: Check for test failures
      run: |
        cd scripts/cache-verification
        if grep -q "テスト失敗" logs/verification.log; then
          echo "Tests failed, see logs for details"
          exit 1
        fi
        echo "All tests passed successfully"

  performance:
    runs-on: ubuntu-latest
    needs: verify
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.full_test == 'true'
    
    services:
      redis:
        image: redis:6-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install matplotlib numpy psutil redis prometheus-client
    
    - name: Run performance tests
      run: |
        cd scripts/cache-verification
        mkdir -p logs test_results
        chmod +x *.sh *.py
        
        # パフォーマンス特化テストの実行
        python run_cache_tests.py --iterations 10000 --value-size 1024 --concurrency 8
        
        # メモリ使用量テスト
        python -c "
        import sys
        import psutil
        import os
        sys.path.append('$(pwd)/../..')
        
        try:
            from src.api.shopify.optimized_cache_manager import OptimizedCacheManager
            
            process = psutil.Process(os.getpid())
            initial_memory = process.memory_info().rss / (1024 * 1024)
            
            cache = OptimizedCacheManager()
            after_init_memory = process.memory_info().rss / (1024 * 1024)
            
            for i in range(10000):
                key = f'memory:test:key:{i}'
                value = 'X' * 1024
                cache.set(key, value)
            
            after_set_memory = process.memory_info().rss / (1024 * 1024)
            
            print(f'初期メモリ: {initial_memory:.2f}MB')
            print(f'初期化後: {after_init_memory:.2f}MB')
            print(f'データ追加後: {after_set_memory:.2f}MB')
            print(f'増加量: {(after_set_memory - after_init_memory):.2f}MB')
            
            if hasattr(cache, 'get_memory_usage'):
                print(f'キャッシュサイズ: {cache.get_memory_usage() / (1024 * 1024):.2f}MB')
            
            expected_increase = 20  # 最大20MB
            if (after_set_memory - after_init_memory) <= expected_increase:
                print('メモリ使用量テスト: 成功')
                sys.exit(0)
            else:
                print('メモリ使用量テスト: 失敗')
                sys.exit(1)
        except Exception as e:
            print(f'エラー: {e}')
            sys.exit(1)
        "
    
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: |
          scripts/cache-verification/test_results/
          scripts/cache-verification/logs/
    
    - name: Generate performance summary
      run: |
        cd scripts/cache-verification
        echo "## Performance Test Results" > performance_summary.md
        echo "" >> performance_summary.md
        echo "### Latest test results:" >> performance_summary.md
        echo "" >> performance_summary.md
        echo '```' >> performance_summary.md
        grep -A 20 "パフォーマンス結果" logs/verification.log >> performance_summary.md || echo "No performance data found" >> performance_summary.md
        echo '```' >> performance_summary.md
        
        # Pull Request コメントのために保存
        mkdir -p ./pr-comment
        cp performance_summary.md ./pr-comment/
    
    - name: Upload PR comment
      uses: actions/upload-artifact@v4
      with:
        name: pr-comment
        path: ./scripts/cache-verification/pr-comment/

  comment:
    runs-on: ubuntu-latest
    needs: [verify, performance]
    if: github.event_name == 'pull_request' && always()
    
    steps:
    - name: Download PR comment
      uses: actions/download-artifact@v4
      with:
        name: pr-comment
        path: ./pr-comment
      continue-on-error: true
    
    - name: Find PR Comment artifact
      id: find-comment
      run: |
        if [ -f "./pr-comment/performance_summary.md" ]; then
          echo "comment_exists=true" >> $GITHUB_OUTPUT
        else
          echo "comment_exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Comment on PR
      if: steps.find-comment.outputs.comment_exists == 'true'
      uses: actions/github-script@v6
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const fs = require('fs');
          const comment = fs.readFileSync('./pr-comment/performance_summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });