name: Unified CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  # Network resilience settings
  INSTALL_RETRY: 5
  INSTALL_TIMEOUT: 180
  PIP_TIMEOUT: 180
  PIP_RETRIES: 3
  PIP_CACHE_DIR: /tmp/pip-cache
  
  # Test environment settings
  E2E_BASE_URL: http://localhost:8000
  PYTEST_ADDOPTS: "-v --tb=short --strict-markers"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('requirements*.txt') }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff black mypy
    - name: Run linters
      run: |
        ruff check .
        black --check .
        mypy . || true  # Non-blocking for now

  test:
    needs: lint
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11']
        include:
          - test-type: unit
            marker: "not integration and not e2e"
          - test-type: integration
            marker: "integration"
            
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies and venv
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          test_venv
        key: ${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-
          
    - name: Setup test environment
      run: |
        cp .env.test.example .env.test || true
        python -m venv test_venv || true
        source test_venv/bin/activate || test_venv\Scripts\activate || true
        pip install -r requirements.txt -r requirements-test.txt
        
    - name: Run ${{ matrix.test-type }} tests
      run: |
        source test_venv/bin/activate || test_venv\Scripts\activate || true
        pytest -m "${{ matrix.marker }}" --cov=src --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: ${{ matrix.test-type }},${{ matrix.os }},${{ matrix.python-version }}

  e2e:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.cache/playwright
        key: ${{ runner.os }}-e2e-${{ hashFiles('requirements*.txt') }}
        
    - name: Install dependencies
      run: |
        pip install -r requirements.txt -r requirements-test.txt
        playwright install chromium --with-deps
        
    - name: Start application server
      run: |
        python -m src.main &
        sleep 5  # Wait for server startup
        
    - name: Run E2E tests
      id: e2e-test
      run: |
        python -m pytest tests/e2e -v --html=e2e-report.html
        
    - name: Upload E2E report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-report-${{ github.run_id }}
        path: |
          e2e-report.html
          screenshots/
          
    - name: Comment on PR
      if: failure() && github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '‚ùå E2E tests failed. Please check the [test results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})'
          })

  docker-build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
          
    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: shopify-mcp-server:${{ github.sha }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  release:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [test, e2e, docker-build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        
    - name: Check version
      id: version
      run: |
        VERSION=$(grep -oP '(?<=version = ")[^"]+' pyproject.toml || echo "0.0.0")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Create Release
      if: contains(github.event.commits[0].message, '[release]')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: Release v${{ steps.version.outputs.version }}
        draft: false
        prerelease: false