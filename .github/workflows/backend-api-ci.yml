name: Backend API CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-api-ci.yml'
  # PR時は軽量なpr-checks.ymlが実行されるため、フル実行は省略

env:
  NODE_VERSION: '18'
  WORKING_DIRECTORY: 'backend'
  REGISTRY: asia-northeast1-docker.pkg.dev
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: conea-backend-api
  REGION: asia-northeast1

jobs:
  test:
    name: Build and Test Backend API
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    services:
      redis:
        image: redis:alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linting (if available)
        run: |
          if npm run --silent lint 2>/dev/null; then
            npm run lint
          else
            echo "No lint script found, skipping linting"
          fi
        # リンティングエラーはコード品質に影響するため失敗時はパイプラインを停止
      
      - name: Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test
          REDIS_URL: redis://localhost:6379
      
      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          REDIS_URL: redis://localhost:6379
        # インテグレーションテストの失敗は重要な問題として扱う
      
      - name: Run test coverage
        run: npm run test:coverage
        env:
          NODE_ENV: test
          REDIS_URL: redis://localhost:6379
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ${{ env.WORKING_DIRECTORY }}/coverage/lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true
        # カバレッジレポートのアップロード失敗はパイプライン停止の必要なし
      
      - name: Run security audit
        run: npm audit --audit-level=moderate
        # プロダクションセキュリティ基準：moderate以上の脆弱性でパイプライン停止

  build:
    name: Build Docker Image
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    outputs:
      image: ${{ steps.build.outputs.image }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}
      
      - name: Configure Docker for Google Cloud
        run: gcloud auth configure-docker ${{ env.REGISTRY }}
      
      - name: Build Docker image
        id: build
        run: |
          IMAGE_NAME="${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}"
          IMAGE_TAG="${GITHUB_SHA::8}"
          FULL_IMAGE="${IMAGE_NAME}:${IMAGE_TAG}"
          
          # Dockerfileベストプラクティス適用確認:
          # - マルチステージビルド利用
          # - .dockerignoreによる不要ファイル除外
          # - 脆弱性のないベースイメージ選択
          # - 非rootユーザーでの実行
          
          docker build -t $FULL_IMAGE ${{ env.WORKING_DIRECTORY }}
          docker push $FULL_IMAGE
          
          echo "image=$FULL_IMAGE" >> $GITHUB_OUTPUT
          echo "Built and pushed: $FULL_IMAGE"

  deploy-staging:
    name: Deploy to Cloud Run (Staging)
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}
      
      - name: Deploy to Cloud Run (Staging)
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }}-staging \
            --image=${{ needs.build.outputs.image }} \
            --platform=managed \
            --region=${{ env.REGION }} \
            --allow-unauthenticated \
            --set-env-vars="NODE_ENV=staging" \
            --set-env-vars="REDIS_URL=${{ secrets.STAGING_REDIS_URL }}" \
            --set-env-vars="DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}" \
            --memory=1Gi \
            --cpu=1 \
            --min-instances=0 \
            --max-instances=10 \
            --timeout=300s \
            --port=8000
      
      - name: Get service URL
        id: deploy
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }}-staging \
            --region=${{ env.REGION }} \
            --format='value(status.url)')
          echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "Service deployed at: $SERVICE_URL"
      
      - name: Run post-deployment health check
        run: |
          sleep 30
          curl -f ${{ steps.deploy.outputs.service_url }}/api/health || exit 1
          echo "✅ Health check passed"
      
      - name: Update staging secrets (if needed)
        run: |
          echo "SERVICE_URL=${{ steps.deploy.outputs.service_url }}" >> $GITHUB_ENV

  deploy-production:
    name: Deploy to Cloud Run (Production)
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}
      
      - name: Deploy to Cloud Run (Production)
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }}-production \
            --image=${{ needs.build.outputs.image }} \
            --platform=managed \
            --region=${{ env.REGION }} \
            --allow-unauthenticated \
            --set-env-vars="NODE_ENV=production" \
            --set-env-vars="REDIS_URL=${{ secrets.PRODUCTION_REDIS_URL }}" \
            --set-env-vars="DATABASE_URL=${{ secrets.PRODUCTION_DATABASE_URL }}" \
            --memory=2Gi \
            --cpu=2 \
            --min-instances=1 \
            --max-instances=50 \
            --timeout=300s \
            --port=8000 \
            --cpu-throttling \
            --execution-environment=gen2
      
      - name: Get service URL
        id: deploy
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }}-production \
            --region=${{ env.REGION }} \
            --format='value(status.url)')
          echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "Service deployed at: $SERVICE_URL"
      
      - name: Run comprehensive health check
        run: |
          sleep 60
          
          # Health check
          curl -f ${{ steps.deploy.outputs.service_url }}/api/health || exit 1
          echo "✅ Health check passed"
          
          # API endpoint check
          curl -f ${{ steps.deploy.outputs.service_url }}/api/status || exit 1
          echo "✅ API status check passed"
      
      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              attachments: [{
                color: 'good',
                text: `✅ Backend API deployed successfully to production\n🔗 Service URL: ${{ steps.deploy.outputs.service_url }}\n📦 Image: ${{ needs.build.outputs.image }}\n👤 Author: ${{ github.actor }}`
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Notify deployment failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              attachments: [{
                color: 'danger',
                text: `❌ Backend API deployment to production failed\n📦 Image: ${{ needs.build.outputs.image }}\n👤 Author: ${{ github.actor }}`
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner on Dockerfile
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '${{ env.WORKING_DIRECTORY }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'
        # CRITICAL・HIGHレベルの脆弱性検出時はパイプライン停止
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true
        if: always()
        # 結果アップロードは常に実行（スキャン失敗時も含む）