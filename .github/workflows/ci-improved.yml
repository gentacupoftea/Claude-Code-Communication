name: CI (Improved)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  # Network resilience settings from PR #25
  INSTALL_RETRY: 5
  INSTALL_TIMEOUT: 180
  PIP_TIMEOUT: 180
  PIP_RETRIES: 3
  INSTALL_RETRY_DISABLED: 0
  NETWORK_TIMEOUT: 30

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        dependency-level: ['minimal', 'standard', 'full']
        exclude:
          # Skip specific combinations that are not supported
          - os: windows-latest
            python-version: '3.8'
            dependency-level: 'full'

    env:
      # Dynamic environment variables based on dependency level
      INSTALL_OPTIONAL: ${{ matrix.dependency-level != 'minimal' && '1' || '0' }}
      INSTALL_DEV: ${{ matrix.dependency-level == 'full' && '1' || '0' }}
      INSTALL_EXTENDED: ${{ matrix.dependency-level != 'minimal' && '1' || '0' }}

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages and vendor directory
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/Library/Caches/pip
          ~/.local/share/pip
          vendor/
          ~/.pip-cache/
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ matrix.dependency-level }}-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ matrix.dependency-level }}-
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Set platform-specific variables
      id: platform
      shell: bash
      run: |
        if [ "${{ runner.os }}" == "Windows" ]; then
          echo "script_ext=.bat" >> $GITHUB_OUTPUT
          echo "path_sep=\\" >> $GITHUB_OUTPUT
          echo "python_exec=python" >> $GITHUB_OUTPUT
        else
          echo "script_ext=.sh" >> $GITHUB_OUTPUT
          echo "path_sep=/" >> $GITHUB_OUTPUT
          echo "python_exec=python3" >> $GITHUB_OUTPUT
        fi

    - name: Set up environment
      shell: bash
      run: |
        echo "Setting up environment for ${{ matrix.dependency-level }} dependencies on ${{ runner.os }}"
        echo "INSTALL_OPTIONAL=${{ env.INSTALL_OPTIONAL }}"
        echo "INSTALL_DEV=${{ env.INSTALL_DEV }}"
        echo "INSTALL_EXTENDED=${{ env.INSTALL_EXTENDED }}"

    - name: Install dependencies
      shell: bash
      run: |
        ${{ steps.platform.outputs.python_exec }} -m pip install --upgrade pip
        
        # Install base dependencies
        if [ -f requirements-base.txt ]; then
          pip install -r requirements-base.txt
        fi
        
        # Install extended dependencies if needed
        if [ "${{ env.INSTALL_EXTENDED }}" == "1" ] && [ -f requirements-extended.txt ]; then
          pip install -r requirements-extended.txt || echo "Some extended dependencies failed to install"
        fi
        
        # Install optional dependencies if needed
        if [ "${{ env.INSTALL_OPTIONAL }}" == "1" ] && [ -f requirements-optional.txt ]; then
          pip install -r requirements-optional.txt || echo "Some optional dependencies failed to install"
        fi
        
        # Install dev dependencies for full level
        if [ "${{ env.INSTALL_DEV }}" == "1" ] && [ -f requirements-dev.txt ]; then
          pip install -r requirements-dev.txt
        fi

    - name: Run import tests
      id: import_test
      shell: bash
      run: |
        ${{ steps.platform.outputs.python_exec }} test_imports.py
      continue-on-error: true

    - name: Run environment check
      shell: bash
      run: |
        ${{ steps.platform.outputs.python_exec }} test_environment_check.py

    - name: Run adaptive tests
      shell: bash
      run: |
        ${{ steps.platform.outputs.python_exec }} run_adaptive_tests.py

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.dependency-level }}
        path: |
          test_report.json
          environment_report.json
          .coverage
          htmlcov/

  test-offline:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.12']

    env:
      OFFLINE_MODE: 1
      VENDOR_DIR: ./vendor

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Prepare offline environment
      run: |
        # Download packages to vendor directory
        mkdir -p vendor
        pip download -d vendor -r requirements-base.txt
        pip download -d vendor pytest coverage

    - name: Install dependencies offline
      run: |
        python -m pip install --upgrade pip
        pip install --no-index --find-links vendor -r requirements-base.txt
        pip install --no-index --find-links vendor pytest coverage

    - name: Run offline tests
      run: |
        python test_network_resilience.py -v

  quality-checks:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Cache quality check tools
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-quality-tools-${{ hashFiles('.pre-commit-config.yaml') }}

    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy isort bandit

    - name: Run Black
      run: black --check .

    - name: Run Flake8
      run: flake8 .
      continue-on-error: true

    - name: Run MyPy
      run: mypy . || true

    - name: Run isort
      run: isort --check-only .

    - name: Security check with Bandit
      run: bandit -r . -ll
      continue-on-error: true

  summary:
    needs: [test, test-offline, quality-checks]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate summary report
      run: |
        echo "# CI Summary Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Matrix Results" >> $GITHUB_STEP_SUMMARY
        echo "| OS | Python | Dependencies | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|--------------|--------|" >> $GITHUB_STEP_SUMMARY
        
        # Process test results and generate summary
        for report in test-results-*/test_report.json; do
          if [ -f "$report" ]; then
            dirname=$(dirname "$report")
            parts=(${dirname//-/ })
            os=${parts[2]}
            python=${parts[3]}
            deps=${parts[4]}
            
            success=$(jq -r '.success // false' "$report" 2>/dev/null || echo "false")
            if [ "$success" = "true" ]; then
              status="✅ Passed"
            else
              status="❌ Failed"
            fi
            
            echo "| $os | $python | $deps | $status |" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Network Resilience" >> $GITHUB_STEP_SUMMARY
        echo "Offline mode tests: ✅ Completed" >> $GITHUB_STEP_SUMMARY