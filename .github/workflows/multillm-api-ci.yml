name: MultiLLM API CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'multiLLM_system/**'
      - '.github/workflows/multillm-api-ci.yml'
  # PR時は軽量なpr-checks.ymlが実行されるため、フル実行は省略

env:
  PYTHON_VERSION: '3.11'
  WORKING_DIRECTORY: 'multiLLM_system'
  REGISTRY: asia-northeast1-docker.pkg.dev
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: conea-multillm-api
  REGION: asia-northeast1

jobs:
  test:
    name: Build and Test MultiLLM API
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    services:
      redis:
        image: redis:alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/requirements.txt
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run linting with flake8
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --max-complexity=10 --max-line-length=127 --statistics
        # コード品質基準：flake8エラーはパイプライン停止の対象
      
      - name: Run type checking with mypy
        run: |
          pip install mypy
          mypy orchestrator/ services/ workers/ --ignore-missing-imports
        # 型チェックエラーはコード品質に影響するため厳格に適用
      
      - name: Run unit tests
        run: |
          python -m pytest tests/ -v --tb=short
        env:
          PYTHONPATH: ${{ github.workspace }}/${{ env.WORKING_DIRECTORY }}
          REDIS_URL: redis://localhost:6379
          DATABASE_URL: postgresql://postgres:testpassword@localhost:5432/testdb
        # ユニットテストの失敗は重要な問題として扱う
      
      - name: Run integration tests
        run: |
          # 統合テストの対象範囲を明確化: tests/integration/ または test_integration_*.py
          if [ -d "tests/integration" ]; then
            python -m pytest tests/integration/ -v --tb=short
          else
            python -m pytest test_integration_*.py -v --tb=short
          fi
        env:
          PYTHONPATH: ${{ github.workspace }}/${{ env.WORKING_DIRECTORY }}
          REDIS_URL: redis://localhost:6379
          DATABASE_URL: postgresql://postgres:testpassword@localhost:5432/testdb
        # 統合テストの失敗は重要な問題として扱う
      
      - name: Run test coverage
        run: |
          pip install pytest-cov
          python -m pytest --cov=orchestrator --cov=services --cov=workers --cov-report=xml --cov-report=html
        env:
          PYTHONPATH: ${{ github.workspace }}/${{ env.WORKING_DIRECTORY }}
          REDIS_URL: redis://localhost:6379
          DATABASE_URL: postgresql://postgres:testpassword@localhost:5432/testdb
        continue-on-error: true
        # カバレッジ収集の失敗はパイプライン停止不要
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ${{ env.WORKING_DIRECTORY }}/coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true
      
      - name: Run security audit (unified)
        run: |
          pip install safety bandit
          # Safety check for dependencies
          safety check --json --output safety-results.json || safety check
          # Bandit check for code security
          bandit -r orchestrator/ services/ workers/ -ll --format json --output bandit-results.json || echo "⚠️ Bandit scan completed with warnings"
        continue-on-error: true

  build:
    name: Build Docker Image
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    outputs:
      image: ${{ steps.build.outputs.image }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}
      
      - name: Configure Docker for Google Cloud
        run: gcloud auth configure-docker ${{ env.REGISTRY }}
      
      - name: Build Docker image
        id: build
        run: |
          IMAGE_NAME="${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}"
          IMAGE_TAG="${GITHUB_SHA::8}"
          FULL_IMAGE="${IMAGE_NAME}:${IMAGE_TAG}"
          
          # Dockerfile最適化確認事項:
          # - マルチステージビルド利用（Python依存関係の効率化）
          # - .dockerignoreで不要ファイル除外（__pycache__, .git等）
          # - 脆弱性のないベースイメージ選択（python:3.11-slim等）
          # - 非rootユーザーでの実行（セキュリティ強化）
          
          docker build -t $FULL_IMAGE ${{ env.WORKING_DIRECTORY }}
          docker push $FULL_IMAGE
          
          echo "image=$FULL_IMAGE" >> $GITHUB_OUTPUT
          echo "Built and pushed: $FULL_IMAGE"

  deploy-staging:
    name: Deploy to Cloud Run (Staging)
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}
      
      - name: Deploy to Cloud Run (Staging)
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }}-staging \
            --image=${{ needs.build.outputs.image }} \
            --platform=managed \
            --region=${{ env.REGION }} \
            --allow-unauthenticated \
            --set-env-vars="ENVIRONMENT=staging" \
            --set-env-vars="REDIS_URL=${{ secrets.STAGING_REDIS_URL }}" \
            --set-env-vars="DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}" \
            --set-env-vars="OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" \
            --set-env-vars="ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}" \
            --set-env-vars="GOOGLE_AI_API_KEY=${{ secrets.GOOGLE_AI_API_KEY }}" \
            --memory=2Gi \
            --cpu=2 \
            --min-instances=0 \
            --max-instances=20 \
            --timeout=900s \
            --port=8000 \
            --concurrency=10
      
      - name: Get service URL
        id: deploy
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }}-staging \
            --region=${{ env.REGION }} \
            --format='value(status.url)')
          echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "Service deployed at: $SERVICE_URL"
      
      - name: Run post-deployment health check
        run: |
          sleep 60
          curl -f ${{ steps.deploy.outputs.service_url }}/health || exit 1
          echo "✅ Health check passed"
      
      - name: Test LLM endpoints
        run: |
          # Test basic API endpoints
          curl -f ${{ steps.deploy.outputs.service_url }}/status || echo "⚠️ Status endpoint not available"
          curl -f ${{ steps.deploy.outputs.service_url }}/models || echo "⚠️ Models endpoint not available"
        continue-on-error: true

  deploy-production:
    name: Deploy to Cloud Run (Production)
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}
      
      - name: Deploy to Cloud Run (Production)
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }}-production \
            --image=${{ needs.build.outputs.image }} \
            --platform=managed \
            --region=${{ env.REGION }} \
            --allow-unauthenticated \
            --set-env-vars="ENVIRONMENT=production" \
            --set-env-vars="REDIS_URL=${{ secrets.PRODUCTION_REDIS_URL }}" \
            --set-env-vars="DATABASE_URL=${{ secrets.PRODUCTION_DATABASE_URL }}" \
            --set-env-vars="OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" \
            --set-env-vars="ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}" \
            --set-env-vars="GOOGLE_AI_API_KEY=${{ secrets.GOOGLE_AI_API_KEY }}" \
            --memory=4Gi \
            --cpu=4 \
            --min-instances=1 \
            --max-instances=100 \
            --timeout=900s \
            --port=8000 \
            --concurrency=50 \
            --cpu-throttling \
            --execution-environment=gen2
      
      - name: Get service URL
        id: deploy
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }}-production \
            --region=${{ env.REGION }} \
            --format='value(status.url)')
          echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "Service deployed at: $SERVICE_URL"
      
      - name: Run comprehensive health check
        run: |
          sleep 90
          
          # Health check
          curl -f ${{ steps.deploy.outputs.service_url }}/health || exit 1
          echo "✅ Health check passed"
          
          # API status check
          curl -f ${{ steps.deploy.outputs.service_url }}/status || exit 1
          echo "✅ API status check passed"
          
          # Models availability check
          curl -f ${{ steps.deploy.outputs.service_url }}/models || echo "⚠️ Models endpoint check failed"
      
      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              attachments: [{
                color: 'good',
                text: `✅ MultiLLM API deployed successfully to production\n🔗 Service URL: ${{ steps.deploy.outputs.service_url }}\n📦 Image: ${{ needs.build.outputs.image }}\n👤 Author: ${{ github.actor }}`
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Notify deployment failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              attachments: [{
                color: 'danger',
                text: `❌ MultiLLM API deployment to production failed\n📦 Image: ${{ needs.build.outputs.image }}\n👤 Author: ${{ github.actor }}`
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '${{ env.WORKING_DIRECTORY }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'
        # CRITICAL・HIGHレベルの脆弱性検出時はパイプライン停止
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true
        if: always()
        # 結果アップロードは常に実行
      
      - name: Run bandit security linter
        run: |
          pip install bandit
          bandit -r orchestrator/ services/ workers/ -f json -o bandit-results.json
          # Medium以上の脆弱性で失敗させる
          bandit -r orchestrator/ services/ workers/ -ll
        # セキュリティ問題の検出時はパイプライン停止
      
      - name: Upload bandit results
        uses: actions/upload-artifact@v4
        with:
          name: bandit-security-results
          path: ${{ env.WORKING_DIRECTORY }}/bandit-results.json
          retention-days: 30
        if: always()
        # bandit結果を常にアーティファクトとして保存