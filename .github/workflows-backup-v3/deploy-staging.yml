name: Deploy to Staging
on:
  push:
    branches:
      - develop
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
        
      - name: Build frontend
        working-directory: ./frontend
        env:
          REACT_APP_API_URL: https://staging.conea.ai/api
          REACT_APP_WS_URL: wss://staging.conea.ai/ws
          REACT_APP_VERSION: staging
        run: npm run build
        
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          
      - name: Run tests
        run: |
          cd frontend && npm test -- --passWithNoTests
          python -m pytest tests/ -k "not integration"
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Generate version
        id: version
        run: echo "VERSION=staging-$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV
        
      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./deployment/staging/frontend.Dockerfile
          push: true
          tags: conea/frontend:staging,conea/frontend:${{ env.VERSION }}
          build-args: |
            REACT_APP_API_URL=https://staging.conea.ai/api
            REACT_APP_WS_URL=wss://staging.conea.ai/ws
            REACT_APP_VERSION=${{ env.VERSION }}
            
      - name: Create backend directory for Docker
        run: |
          mkdir -p temp_backend
          cp -r src/ temp_backend/
          cp shopify_mcp_server.py temp_backend/
          cp run_server.py temp_backend/
          cp requirements.txt temp_backend/
          cp package.json temp_backend/
          cp package-lock.json temp_backend/ || true
          cp tsconfig.json temp_backend/ || true
          cp Dockerfile temp_backend/Dockerfile || true
            
      - name: Build and push backend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./temp_backend
          file: ./deployment/staging/backend.Dockerfile
          push: true
          tags: conea/backend:staging,conea/backend:${{ env.VERSION }}
            
      - name: Deploy to staging server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /opt/conea-staging
            
            # Pull latest docker-compose and configs
            git pull
            
            # Update image versions
            sed -i 's|conea/frontend:staging|conea/frontend:${{ env.VERSION }}|g' docker-compose.yml
            sed -i 's|conea/backend:staging|conea/backend:${{ env.VERSION }}|g' docker-compose.yml
            
            # Update environment variables
            sed -i 's|REACT_APP_API_URL=.*|REACT_APP_API_URL=https://staging.conea.ai/api|g' .env
            sed -i 's|REACT_APP_WS_URL=.*|REACT_APP_WS_URL=wss://staging.conea.ai/ws|g' .env
            
            # Restart containers
            docker-compose pull
            docker-compose down
            docker-compose up -d
            
            # Wait for services to initialize
            sleep 10
            
            # Run health checks
            BACKEND_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/health || echo "Failed")
            FRONTEND_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/health.txt || echo "Failed")
            
            if [ "$BACKEND_HEALTH" == "200" ] && [ "$FRONTEND_HEALTH" == "200" ]; then
              echo "Deployment successful to https://staging.conea.ai/"
              exit 0
            else
              echo "Health check failed: Backend: $BACKEND_HEALTH, Frontend: $FRONTEND_HEALTH"
              exit 1
            fi
            
      - name: Notify deployment success
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: staging-deployments
          SLACK_COLOR: good
          SLACK_MESSAGE: 'Successfully deployed to staging: ${{ env.VERSION }}'
          SLACK_TITLE: 'Staging Deployment'
          
      - name: Notify deployment failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: staging-deployments
          SLACK_COLOR: danger
          SLACK_MESSAGE: 'Failed to deploy to staging'
          SLACK_TITLE: 'Staging Deployment Failed'