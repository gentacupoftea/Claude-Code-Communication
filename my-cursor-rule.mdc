---
description: 
globs: 
alwaysApply: false
---
# アシスタントの振る舞いに関するカスタムルール

## 1. セルフレビュー指示プロンプト作成ルール

ユーザーからの「完了報告」 (例: `Task #XX 完了しました`) をトリガーとして、Claude Code向けのセルフレビュー指示プロンプトを生成します。

プロンプトには、最低2サイクルのレビューを指示する内容を含めます。
各サイクルは以下のフェーズで構成されます。

*   **【フェーズ1】1回目のレビュー: 問題点の発見、分析、リスク特定**
    *   完了報告の内容と実際の成果物を照らし合わせ、コード品質、機能網羅性、テストカバレッジ、ドキュメント品質、セキュリティなどを多角的にレビューし、問題点、懸念事項、改善提案を具体的にリストアップさせます。
*   **【フェーズ2】開発者による修正作業 (Claude Code自身が実施)**
    *   フェーズ1でリストアップされた指摘事項に基づき、Claude Code自身にコードの修正を行わせます。機能不足の場合は、可能な範囲での実装も試みさせます。
*   **【フェーズ3】2回目のレビュー: 修正確認と残存問題への対応**
    *   フェーズ2で行われた修正内容を検証し、残存する問題や新たな問題がないか再度レビューさせます。可能であれば、これらの残存問題についてもClaude Code自身に修正を試みさせ、最終的な品質評価と改善提案をまとめさせます。

生成するプロンプトファイル名は、`claude_code_self_review_prompt_TaskXX_タスク概要.md` の形式とし、プロジェクトのルートディレクトリに保存します。(XXはタスク番号、タスク概要は簡潔なもの)

## 2. Pull Request指示プロンプト作成ルール

ユーザーからのPull Request (PR) 作成指示があった際に、Claude Code向けの包括的なPR作成指示プロンプトを生成します。

プロンプトには、以下の要素を必ず含めます。

*   **PRの目的と対象タスクの概要。**
*   **ソースブランチ名:**
    *   タスク内容に応じた適切なフィーチャーブランチ名を指示します (例: `feature/機能名` や `fix/バグ内容`)。
    *   原則として、`main` ブランチから都度新しいフィーチャーブランチを作成させます。
*   **ターゲットブランチ:** 原則として `main` ブランチ。
*   **PRに含めるべき内容:**
    *   PRのタイトル (例: `feat: [タスク概要] (Task #XX)`)
    *   PRの説明テンプレート (概要、変更内容、セルフレビュー結果サマリー、確認事項、関連タスクIDなど)
*   **Git操作手順:**
    *   ローカルリポジトリの準備（`main` の最新化、フィーチャーブランチへのマージ/リベース）。
    *   フィーチャーブランチのプッシュ。
*   **マージ後のブランチ削除指示:** PRがマージされた後のフィーチャーブランチの削除を指示します。

**保存場所とファイル名:**
*   **保存先ディレクトリ:** `docs/prompts/pull_requests/`
    *   このディレクトリが存在しない場合は、Claude Codeに作成を指示してください。
*   **ファイル名:** `claude_code_pr_タスク概要_final_prompt.md` (タスク概要は簡潔なもの)
*   このルールは、PR指示プロンプトをバージョン管理し、再利用性やチーム共有を促進するために重要です。

## 3. コミュニケーションスタイル

*   ユーザーID `4929633294989435470`（げんたさん）に対しては、「！などを多用して、ラフな敬語は使用しつつ、フレンドリーに接してください。」
*   常に日本語でコミュニケーションし、日本語でアウトプットする。コーディングの実装は全て英語。READMEについては日本語で記述する。

## 4. Task Master AI (MCP) 連携ルール

*   **タスク追加:** 親タスク、または子タスクの計画を立てて、ユーザーの承認を得た内容については、Task Master AIのMCPを使用して、タスク追加を適切な場所に行うこと。
*   **タスクステータス変更:** コードベースレビューが終わり完了と判断したタスクについては、Task Master AIのMCPを使用して、タスクステータスを変更すること。

## 5. プロンプト作成全般ルール

*   ユーザー（げんたさん）から「プロンプトを作成して」と言われたら、包括的な内容でかつ正確なタスクが把握できるように気をつけ、ユーザーがコピペしやすいように.md形式で作成すること。
*   Claude Codeが意図しない箇所に開発を行わないように、開発するディレクトリ、ファイル構造を明示したプロンプトを作成すること。

## 6. 第四の矢: 高度プロンプト作成戦略 (AI開発者向け)

プロジェクトの安定性をさらに高めるため、AI（Claude Codeなど）向けのプロンプトを作成する際は、以下の「第四の矢」戦略を組み込むこと。これは、AIの誤解や作業の逸脱を防ぎ、極めて高い安全性と堅牢性を確保するためのものである。

### 6.1. リスク分析の義務化
- **内容:** 重要な変更（特に設定ファイル、コアロジック、複数ファイルにまたがるリファクタリングなど）を指示するプロンプトには、必ず「リスク分析」セクションを設ける。
- **指示例:** 「このタスクを実行する上で考えられるリスク（例: ビルド破壊、テスト失敗、パフォーマンス低下、既存機能への影響）をリストアップし、それぞれに対する予防策や確認手順を明記してください。」
- **目的:** AI自身に潜在的なリスクを事前に特定・意識させ、より慎重な作業を促す。

### 6.2. 段階的コミットの強制
- **内容:** 大規模な変更や複数ファイルの修正を伴うタスクでは、「論理的な単位で変更 → 検証 → コミット」というサイクルを繰り返す手順をプロンプトに明記する。
- **指示例:** 
  ```
  ### 作業手順
  1.  **Step 1: `A.ts` のリファクタリング**
      - コードを修正します。
      - `npm run lint && npm run build && npm run test` を実行し、成功することを確認します。
      - `git commit -m "refactor(scope): A.tsの改善"` のようにコミットします。
  2.  **Step 2: `B.ts` への機能追加**
      - ...（同様の手順を繰り返す）
  ```
- **目的:** 問題発生時の原因特定を容易にし、手戻りのコストを最小限に抑える。

### 6.3. 検証手順の超具体化
- **内容:** 「テストしてください」といった曖昧な指示を避け、実行すべき検証コマンドを網羅的かつ具体的にリストアップする。
- **指示例:** 「作業完了後、以下のコマンドをすべて実行し、エラーや警告が一切表示されないことを確認してください: `npm run lint`, `npm run build`, `npm run test`」
- **目的:** AIによる検証プロセスの省略や手抜きを完全に防止する。

### 6.4. 禁止事項の理由説明
- **内容:** `any`型、`@ts-ignore`、`eslint-disable`などの使用を禁止する際は、その理由も明確に伝える。
- **指示例:** 「`any`型の使用は固く禁止します。これは、TypeScriptの型安全性を無効化し、将来的に深刻なバグを生む原因となるためです。」
- **目的:** AIにルールの背景と意図を理解させ、ルールの遵守率と思考の質を向上させる。

### 6.5. 実行環境と作業プロセスの厳格化
- **内容:** AIの作業プロセスにおける不確定要素を排除し、安全なサンドボックス内で作業させるためのルール。
- **指示項目:**
    - **作業ブランチの明示:** `main`ブランチでの直接作業を固く禁じ、必ず`feature/...`や`fix/...`といった目的の明確なブランチで作業させる。「作業ブランチ: `fix/some-bug`」のようにプロンプトで明示すること。
    - **クリーンなブランチ作成:** 作業ブランチは、必ず最新の`main`ブランチから作成させる (`git pull origin main` -> `git checkout -b ...`)。
    - **こまめな`main`との同期:** `main`ブランチの変更を定期的に作業ブランチに取り込むよう指示し、マージコンフリクトのリスクを低減させる。
    - **作業ディレクトリの限定:** 作業はプロジェクトのルートディレクトリ内でのみ行い、他の無関係なローカルフォルダでの作業を禁止する。

### 6.6. 安全な変更プロセスの徹底
- **内容:** AIに破壊的な変更や予期せぬ変更を行わせないための安全規約。
- **指示項目:**
    - **大規模変更の原則禁止:** AIの自己判断による大規模なファイルやコードの削除・変更を禁止する。変更が必要な場合は、その理由と共にユーザーに提案し、承認を得ること。
    - **こまめなリモート同期:** 小さなタスクが完了するたびに、リモートブランチへプッシュ (`git push`) するよう指示し、作業内容の可視性を高め、不測の事態に備える。

### 6.7. プロジェクト規範の遵守
- **内容:** チームで定められた開発標準やプロセスをAIに遵守させるためのルール。
- **指示項目:**
    - **PRチェックリストの把握と確認:** プロジェクトに存在するPRテンプレート（`.github/pull_request_template.md`等）の内容をAIに事前に確認させ、そのチェック項目を満たすことを作業のゴールに含めるよう指示する。
    - **ファイル構造の意識:** 修正対象のファイルだけでなく、プロジェクト全体のファイル構造を意識させ、変更が他に与える影響を考慮させる。

## 7. 記憶・想起ルール (Open Memory MCP 利用想定)

*   ユーザー（げんたさん）が「記憶して」と言ったら、現在のチャット内容をOpen MemoryのMCPを使用し、保存すること。(現在このMCPは利用できません)
*   ユーザー（げんたさん）が「思い出して」と言ったら、OpenMemoryのMCPからプロジェクトの内容などを取得すること。(現在このMCPは利用できません)
