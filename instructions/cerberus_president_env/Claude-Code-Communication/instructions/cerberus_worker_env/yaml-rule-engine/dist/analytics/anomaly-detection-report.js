"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnomalyDetectionAnalyzer = void 0;
const metrics_collector_1 = require("../metrics/metrics-collector");
const rule_engine_1 = require("../core/rule-engine");
const fs_1 = require("fs");
const path_1 = require("path");
class AnomalyDetectionAnalyzer {
    engine;
    metricsCollector;
    testCases = [];
    results = {
        totalAnomalies: 0,
        truePositives: 0,
        falsePositives: 0,
        trueNegatives: 0,
        falseNegatives: 0,
        precision: 0,
        recall: 0,
        f1Score: 0,
        accuracy: 0,
        detectionLatency: [],
        anomalyTypes: {}
    };
    constructor() {
        this.engine = new rule_engine_1.YAMLRuleEngine();
        this.metricsCollector = new metrics_collector_1.MetricsCollector();
        this.generateTestCases();
    }
    // „ÉÜ„Çπ„Éà„Ç±„Éº„Çπ„ÅÆÁîüÊàê
    generateTestCases() {
        // Ê≠£Â∏∏„Ç±„Éº„Çπ
        for (let i = 0; i < 100; i++) {
            this.testCases.push({
                context: {
                    request: { path: '/api/users', responseTime: 50 + Math.random() * 50 },
                    metrics: { cpuUsage: 30 + Math.random() * 20 }
                },
                expectedAnomaly: false,
                description: `Ê≠£Â∏∏„Ç±„Éº„Çπ ${i + 1}`
            });
        }
        // „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÁï∞Â∏∏„Ç±„Éº„Çπ
        for (let i = 0; i < 30; i++) {
            this.testCases.push({
                context: {
                    request: { path: '/api/heavy-operation', responseTime: 3000 + Math.random() * 2000 },
                    metrics: { cpuUsage: 90 + Math.random() * 10 }
                },
                expectedAnomaly: true,
                anomalyType: 'performance',
                description: `„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÁï∞Â∏∏ ${i + 1}`
            });
        }
        // Á≤æÂ∫¶Áï∞Â∏∏„Ç±„Éº„Çπ
        for (let i = 0; i < 20; i++) {
            this.testCases.push({
                context: {
                    neuralScore: 0.1 + Math.random() * 0.2,
                    matchRate: 0.1 + Math.random() * 0.1
                },
                expectedAnomaly: true,
                anomalyType: 'accuracy',
                description: `Á≤æÂ∫¶Áï∞Â∏∏ ${i + 1}`
            });
        }
        // „Éë„Çø„Éº„É≥Áï∞Â∏∏„Ç±„Éº„Çπ
        for (let i = 0; i < 20; i++) {
            this.testCases.push({
                context: {
                    request: {
                        path: '/admin/delete-all',
                        headers: { 'X-Forwarded-For': `192.168.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}` }
                    },
                    unusualPattern: true
                },
                expectedAnomaly: true,
                anomalyType: 'pattern',
                description: `„Éë„Çø„Éº„É≥Áï∞Â∏∏ ${i + 1}`
            });
        }
        // „Ç®„ÉÉ„Ç∏„Ç±„Éº„Çπ
        this.testCases.push({
            context: {
                request: { responseTime: 999 }, // ÈñæÂÄ§„ÇÆ„É™„ÇÆ„É™
                metrics: { cpuUsage: 79 }
            },
            expectedAnomaly: false,
            description: '„Ç®„ÉÉ„Ç∏„Ç±„Éº„Çπ - ÈñæÂÄ§Â¢ÉÁïå'
        });
    }
    async analyze() {
        console.log('üîç Áï∞Â∏∏Ê§úÁü•Á≤æÂ∫¶ÂàÜÊûêÈñãÂßã\n');
        // „Ç®„É≥„Ç∏„É≥ÂàùÊúüÂåñ
        await this.initializeEngine();
        // ÂêÑ„ÉÜ„Çπ„Éà„Ç±„Éº„Çπ„ÇíÂÆüË°å
        for (const testCase of this.testCases) {
            await this.evaluateTestCase(testCase);
        }
        // „É°„Éà„É™„ÇØ„ÇπË®àÁÆó
        this.calculateMetrics();
        // „É¨„Éù„Éº„ÉàÁîüÊàê
        this.generateReport();
    }
    async initializeEngine() {
        const rulesPath = (0, path_1.join)(__dirname, '../../examples/sample-rules.yaml');
        const yamlContent = (0, fs_1.readFileSync)(rulesPath, 'utf-8');
        await this.engine.loadRulesFromYAML(yamlContent);
        // „É°„Éà„É™„ÇØ„Çπ„Ç≥„É¨„ÇØ„Çø„Éº„ÅÆ„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„ÉºË®≠ÂÆö
        let anomalyDetected = false;
        this.metricsCollector.on('anomalyDetected', (anomaly) => {
            anomalyDetected = true;
            this.results.anomalyTypes[anomaly.type] = (this.results.anomalyTypes[anomaly.type] || 0) + 1;
        });
    }
    async evaluateTestCase(testCase) {
        const startTime = Date.now();
        // Áï∞Â∏∏Ê§úÁü•„Çí„É™„Çª„ÉÉ„Éà
        let anomalyDetected = false;
        const anomalyListener = () => { anomalyDetected = true; };
        this.metricsCollector.once('anomalyDetected', anomalyListener);
        // Ë©ï‰æ°ÂÆüË°å
        await this.engine.evaluate(testCase.context);
        // Ê§úÂá∫ÊôÇÈñì„ÇíË®òÈå≤
        const detectionTime = Date.now() - startTime;
        this.results.detectionLatency.push(detectionTime);
        // ÁµêÊûú„ÅÆÂàÜÈ°û
        if (testCase.expectedAnomaly && anomalyDetected) {
            this.results.truePositives++;
        }
        else if (!testCase.expectedAnomaly && !anomalyDetected) {
            this.results.trueNegatives++;
        }
        else if (!testCase.expectedAnomaly && anomalyDetected) {
            this.results.falsePositives++;
            console.log(`‚ùå Ë™§Ê§úÁü•: ${testCase.description}`);
        }
        else if (testCase.expectedAnomaly && !anomalyDetected) {
            this.results.falseNegatives++;
            console.log(`‚ùå Ë¶ãÈÄÉ„Åó: ${testCase.description}`);
        }
        if (anomalyDetected) {
            this.results.totalAnomalies++;
        }
        // „É™„Çπ„Éä„Éº„ÇíÂâäÈô§
        this.metricsCollector.removeListener('anomalyDetected', anomalyListener);
    }
    calculateMetrics() {
        const { truePositives, falsePositives, trueNegatives, falseNegatives } = this.results;
        // Á≤æÂ∫¶ (Precision) = TP / (TP + FP)
        this.results.precision = truePositives / (truePositives + falsePositives) || 0;
        // ÂÜçÁèæÁéá (Recall) = TP / (TP + FN)
        this.results.recall = truePositives / (truePositives + falseNegatives) || 0;
        // F1„Çπ„Ç≥„Ç¢ = 2 * (Precision * Recall) / (Precision + Recall)
        this.results.f1Score = 2 * (this.results.precision * this.results.recall) /
            (this.results.precision + this.results.recall) || 0;
        // Ê≠£Ëß£Áéá (Accuracy) = (TP + TN) / Total
        const total = truePositives + falsePositives + trueNegatives + falseNegatives;
        this.results.accuracy = (truePositives + trueNegatives) / total || 0;
    }
    generateReport() {
        const report = `
# Áï∞Â∏∏Ê§úÁü•„Ç∑„Çπ„ÉÜ„É†Á≤æÂ∫¶„É¨„Éù„Éº„Éà
ÁîüÊàêÊó•ÊôÇ: ${new Date().toISOString()}

## üìä ÂÖ®‰Ωì„É°„Éà„É™„ÇØ„Çπ

| „É°„Éà„É™„ÇØ„Çπ | ÂÄ§ | Ë©ï‰æ° |
|----------|-----|------|
| **Á≤æÂ∫¶ (Precision)** | ${(this.results.precision * 100).toFixed(2)}% | ${this.evaluateMetric(this.results.precision)} |
| **ÂÜçÁèæÁéá (Recall)** | ${(this.results.recall * 100).toFixed(2)}% | ${this.evaluateMetric(this.results.recall)} |
| **F1„Çπ„Ç≥„Ç¢** | ${(this.results.f1Score * 100).toFixed(2)}% | ${this.evaluateMetric(this.results.f1Score)} |
| **Ê≠£Ëß£Áéá (Accuracy)** | ${(this.results.accuracy * 100).toFixed(2)}% | ${this.evaluateMetric(this.results.accuracy)} |

## üéØ Ê§úÂá∫ÁµêÊûúË©≥Á¥∞

- **Á∑è„ÉÜ„Çπ„Éà„Ç±„Éº„ÇπÊï∞**: ${this.testCases.length}
- **Ê§úÂá∫„Åï„Çå„ÅüÁï∞Â∏∏Êï∞**: ${this.results.totalAnomalies}
- **ÁúüÈôΩÊÄß (TP)**: ${this.results.truePositives}
- **ÂÅΩÈôΩÊÄß (FP)**: ${this.results.falsePositives} (Ë™§Ê§úÁü•)
- **ÁúüÈô∞ÊÄß (TN)**: ${this.results.trueNegatives}
- **ÂÅΩÈô∞ÊÄß (FN)**: ${this.results.falseNegatives} (Ë¶ãÈÄÉ„Åó)

## ‚ö° „Éë„Éï„Ç©„Éº„Éû„É≥„Çπ

- **Âπ≥ÂùáÊ§úÂá∫ÈÅÖÂª∂**: ${this.calculateAverage(this.results.detectionLatency).toFixed(2)}ms
- **ÊúÄÂ∞èÊ§úÂá∫ÈÅÖÂª∂**: ${Math.min(...this.results.detectionLatency)}ms
- **ÊúÄÂ§ßÊ§úÂá∫ÈÅÖÂª∂**: ${Math.max(...this.results.detectionLatency)}ms

## üìà Áï∞Â∏∏„Çø„Ç§„ÉóÂà•ÂàÜÊûê

${this.generateAnomalyTypeAnalysis()}

## üí° ÊîπÂñÑÊèêÊ°à

${this.generateImprovementSuggestions()}

## üé® ÂèØË¶ñÂåñÁî®„Éá„Éº„Çø

\`\`\`json
${JSON.stringify({
            confusion_matrix: {
                true_positive: this.results.truePositives,
                false_positive: this.results.falsePositives,
                true_negative: this.results.trueNegatives,
                false_negative: this.results.falseNegatives
            },
            metrics: {
                precision: this.results.precision,
                recall: this.results.recall,
                f1_score: this.results.f1Score,
                accuracy: this.results.accuracy
            },
            latency_distribution: this.generateLatencyDistribution()
        }, null, 2)}
\`\`\`
`;
        // „É¨„Éù„Éº„Éà„Çí„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò
        const reportPath = (0, path_1.join)(__dirname, '../../reports/anomaly-detection-report.md');
        (0, fs_1.writeFileSync)(reportPath, report);
        // „Ç≥„É≥„ÇΩ„Éº„É´„Å´„Çµ„Éû„É™„Éº„ÇíË°®Á§∫
        console.log('\nüìä Áï∞Â∏∏Ê§úÁü•Á≤æÂ∫¶„Çµ„Éû„É™„Éº');
        console.log('‚îÅ'.repeat(50));
        console.log(`Á≤æÂ∫¶ (Precision): ${(this.results.precision * 100).toFixed(2)}%`);
        console.log(`ÂÜçÁèæÁéá (Recall): ${(this.results.recall * 100).toFixed(2)}%`);
        console.log(`F1„Çπ„Ç≥„Ç¢: ${(this.results.f1Score * 100).toFixed(2)}%`);
        console.log(`Ê≠£Ëß£Áéá: ${(this.results.accuracy * 100).toFixed(2)}%`);
        console.log(`Ë™§Ê§úÁü•Áéá: ${(this.results.falsePositives / this.testCases.length * 100).toFixed(2)}%`);
        console.log('‚îÅ'.repeat(50));
        console.log(`\n‚úÖ „É¨„Éù„Éº„Éà„Åå‰øùÂ≠ò„Åï„Çå„Åæ„Åó„Åü: ${reportPath}`);
    }
    evaluateMetric(value) {
        if (value >= 0.95)
            return 'üü¢ ÂÑ™ÁßÄ';
        if (value >= 0.85)
            return 'üü° ËâØÂ•Ω';
        if (value >= 0.75)
            return 'üü† ÊîπÂñÑ‰ΩôÂú∞„ÅÇ„Çä';
        return 'üî¥ Ë¶ÅÊîπÂñÑ';
    }
    calculateAverage(values) {
        return values.reduce((a, b) => a + b, 0) / values.length;
    }
    generateAnomalyTypeAnalysis() {
        const types = Object.entries(this.results.anomalyTypes)
            .map(([type, count]) => `- **${type}**: ${count}‰ª∂`)
            .join('\n');
        return types || '- Áï∞Â∏∏„Çø„Ç§„ÉóÂà•„Éá„Éº„Çø„Å™„Åó';
    }
    generateImprovementSuggestions() {
        const suggestions = [];
        if (this.results.precision < 0.9) {
            suggestions.push('- Ë™§Ê§úÁü•„ÇíÊ∏õ„Çâ„Åô„Åü„ÇÅ„ÄÅÁï∞Â∏∏Âà§ÂÆö„ÅÆÈñæÂÄ§„ÇíË™øÊï¥„Åô„Çã„Åì„Å®„ÇíÊé®Â•®');
        }
        if (this.results.recall < 0.9) {
            suggestions.push('- Ë¶ãÈÄÉ„Åó„ÇíÊ∏õ„Çâ„Åô„Åü„ÇÅ„ÄÅ„Çà„ÇäÂ§öÊßò„Å™Áï∞Â∏∏„Éë„Çø„Éº„É≥„ÅÆÂ≠¶Áøí„ÇíÊé®Â•®');
        }
        if (this.calculateAverage(this.results.detectionLatency) > 100) {
            suggestions.push('- Ê§úÂá∫ÈÅÖÂª∂„ÇíÊîπÂñÑ„Åô„Çã„Åü„ÇÅ„ÄÅ‰∏¶ÂàóÂá¶ÁêÜ„ÅÆÊúÄÈÅ©Âåñ„ÇíÊé®Â•®');
        }
        if (this.results.falsePositives > 10) {
            suggestions.push('- Ê©üÊ¢∞Â≠¶Áøí„É¢„Éá„É´„ÅÆÂÜç„Éà„É¨„Éº„Éã„É≥„Ç∞„ÇíÊ§úË®é');
        }
        return suggestions.length > 0 ? suggestions.join('\n') : '- ÁèæÂú®„ÅÆ„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„ÅØËâØÂ•Ω„Åß„Åô';
    }
    generateLatencyDistribution() {
        const distribution = {
            '0-50ms': 0,
            '50-100ms': 0,
            '100-200ms': 0,
            '200ms+': 0
        };
        for (const latency of this.results.detectionLatency) {
            if (latency < 50)
                distribution['0-50ms']++;
            else if (latency < 100)
                distribution['50-100ms']++;
            else if (latency < 200)
                distribution['100-200ms']++;
            else
                distribution['200ms+']++;
        }
        return distribution;
    }
}
exports.AnomalyDetectionAnalyzer = AnomalyDetectionAnalyzer;
// „Çπ„Çø„É≥„Éâ„Ç¢„É≠„É≥ÂÆüË°å
if (require.main === module) {
    const analyzer = new AnomalyDetectionAnalyzer();
    analyzer.analyze().catch(console.error);
}
