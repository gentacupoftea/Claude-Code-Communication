name: 🚀 Deploy Conea Frontend

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: conea-frontend

jobs:
  # Test and Build
  test-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install Dependencies
        working-directory: ./frontend
        run: npm ci

      - name: 🔍 Lint Code
        working-directory: ./frontend
        run: npm run lint

      - name: 🧪 Run Tests
        working-directory: ./frontend
        run: npm test -- --coverage --watchAll=false

      - name: 📊 Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          directory: ./frontend/coverage

      - name: 🏗️ Build Application
        working-directory: ./frontend
        run: npm run build

      - name: 📁 Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: frontend/build/
          retention-days: 1

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    needs: test-and-build
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔒 Run Security Audit
        working-directory: ./frontend
        run: npm audit --audit-level moderate

      - name: 🛡️ Run Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
          command: test

  # Build and Push Docker Image
  docker-build:
    runs-on: ubuntu-latest
    needs: [test-and-build, security-scan]
    if: github.event_name == 'push'
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🐳 Build and Push Docker Image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/deployment/docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Staging
        run: |
          echo "Deploying to staging environment..."
          echo "Image digest: ${{ needs.docker-build.outputs.image-digest }}"
          # Add actual deployment commands here

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Production
        run: |
          echo "Deploying to production environment..."
          echo "Image digest: ${{ needs.docker-build.outputs.image-digest }}"
          # Add actual deployment commands here

      - name: 📢 Notify Deployment
        if: success()
        run: |
          echo "✅ Conea Frontend successfully deployed to production!"
          # Add notification logic (Slack, Discord, etc.)

  # Performance Testing
  lighthouse:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './frontend/.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true